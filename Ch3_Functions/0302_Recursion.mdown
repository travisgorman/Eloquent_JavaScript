## Recursion
take a number parameter, and return a boolean. Return `true` if the number is even, or `false` if odd. Instead of using a modulo operator.  use recursion along with the following description: 

- Zero is even  
- One is odd  
- For any other number, its evenness is the same as (n - 2)  

```js
function isEven(n) {
  
  if (n === 0) {
    return true;
  }
  else if (n === 1) {
    return false;
  } 
  else {
    return isEven(n-2);
  }

}

```
This works for positive numbers, but if `n` is less than zero, we get `RangeError: Maximum call stack size exceeded`.  
The recursive calls to `isEven`, subtract 2 from `n` on and on, until finally Chrome says enough is enough. We need to eventually hit one or zero, and that will never happen here.  

We can address the issue of negative numbers, by adding a line at the top of the conditional chain that converts `n` to its positive equivelant. Now we will eventually hit one or zero.  
This works as long as `n` is a number between -1

Here is an updated version that works for all numbers between -15,580 and 15,580
This limitation is based on the fact that 15,580 is the call stack limit at the moment for the current version of Chrome. 

```js
function isEven(n) {
  if (n < 0) {        /* if `n` is less than zero */
  return isEven(-n)   /* convert it to its positive equivilant, and continue as usual down the chain of conditionals */
  }
  else if (n === 0) {
    return true;
  }
  else if (n === 1) {
    return false;
  } 
  else {
    return isEven(n-2);
  }

}
```
