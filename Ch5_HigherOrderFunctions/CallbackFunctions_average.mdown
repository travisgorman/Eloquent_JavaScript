Composing higher order functions to find the average age of men and women in a dataset. 

### Callback Functions

```js
function plus (a, b) { 
  return a + b;
}
```
```js
function age (person) {
  return person.died - person.born;
}
```
```js
function male (person) {
  return person.sex === "m";
}
```
```js
function female (person) {
  return person.sex === "f";
}
```
### Average()
The `plus` function above is passed into `reduce` as a callback to add up all items in an array.  

```js
function average (array) {
  return array.reduce(plus) / array.length;
}
```

1. filter `ancestry` array for men, passing in `male` callback 
1. call `map` passing `age` callback - creates array with ages of all men
1. pass all this into our `average` function
1. `average` takes the array returned by `map` and 
  * uses `reduce` to find sum
  * and divides by `array.length` to get an average 


#### Average Age of Men

```js
average(ancestry.filter(male).map(age));
```
> 61.666666666666664  


```js
average(ancestry.filter(female).map(age));
```
> 54.55555555555556  

#### roundAverage()
The function above works great, but I might not need accuracy out to 15 decimal points, and would rather have a round number to work with. Here, I modified the `average` function with `Math.round` to produce a cleaner answer. 
```js
function roundAverage(array) {
    function plus(a, b){ return a +b;}
    return Math.round(array.reduce(plus) / array.length);
}
```
What is the average age of men?
```js
roundAverage(ancestry.filter(male).map(age));
// -> 62
```
What is the average age of women?
```js
roundAverage(ancestry.filter(female).map(age));
// -> 62
```

