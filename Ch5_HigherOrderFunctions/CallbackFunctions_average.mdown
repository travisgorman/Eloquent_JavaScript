# Composing higher order functions.
Here, I'm using `map()`, `filter()`, and `reduce() to find the average age of men in [ancestry](http://eloquentjavascript.net/code/ancestry.js) 

### Callback Functions
A few small callback functions I'll be using. `plus()`, `age()`, `male()`, and `female()`  will all be passed into other functions as arguments. 
##### plus( )
`plus()` takes one thing, `a`, and adds it to another thing, `b`. It can be used all over the place. In this case, it will be passed as a callback function that tells `reduce()` what to do as it goes through an array - to add the previous item to the current item until the array is reduced to the sum of all items.
```js
function plus (a, b) { 
  return a + b;
}
```
##### age( )
If you have an object with `born` and `died` properties, assuming their values are birth year and death year, `age` will subtract `born` from `died` to return an age. I will be passing it into `map` to create an array of ages, which will be useful because `average()` takes an array as an argument. 
```js
function age (person) {
  return person.died - person.born;
}
```
##### male( )
`male` will be passed into `filter` as a criteria. 
```js
function male (person) {
  return person.sex === "m";
}
```
##### female( )
`female` will be passed into `filter` as a criteria. 
```js
function female (person) {
  return person.sex === "f";
}
```
### Average( )
The `plus` function above is passed into `reduce` as a callback to add up all items in an array.  

```js
function average (array) {
  return array.reduce(plus) / array.length;
}
```

1. filter `ancestry` array for men, passing in `male` callback 
1. call `map` passing `age` callback - creates array with ages of all men
1. pass all this into our `average` function
1. `average` takes the array returned by `map` and 
  * uses `reduce` to find sum
  * and divides by `array.length` to get an average 


#### Average Age of Men

```js
average(ancestry.filter(male).map(age));
```
> 61.666666666666664  


```js
average(ancestry.filter(female).map(age));
```
> 54.55555555555556  

#### roundAverage()
The function above works great, but I might not need accuracy out to 15 decimal points, and would rather have a round number to work with. Here, I modified the `average` function with `Math.round` to produce a cleaner answer. 
```js
function roundAverage(array) {
    function plus(a, b){ return a +b;}
    return Math.round(array.reduce(plus) / array.length);
}
```
What is the average age of men?
```js
roundAverage(ancestry.filter(male).map(age));
```
> 62  

What is the average age of women?
```js
roundAverage(ancestry.filter(female).map(age));
```
> 55  

