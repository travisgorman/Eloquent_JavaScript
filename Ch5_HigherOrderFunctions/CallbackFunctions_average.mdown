# Composing higher order functions.
Here, I'm using `map()`, `filter()`, and `reduce()` to find the average age of men in the [ancestry](http://eloquentjavascript.net/code/ancestry.js) dataset.

### Callback Functions
These are the brains of a higher-order function. `plus()`, `age()`, `male()`, and `female()` will all be passed into other functions as arguments. 

##### plus( )
`plus()` takes something, `a`, and adds it to something else, `b`. I'll be passing it as a callback function that directs `reduce()` as it goes through an array - telling it to add the previous item to the current item until the array is reduced to the sum of all items.

```js
function plus (a, b) { 
  return a + b;
}
```

##### age( )
If you have an object with `born` and `died` properties, assuming their values are birth year and death year, `age()` will subtract `born` from `died` to return an age. I will be passing it into `map()` to create an array of ages, which will be useful because `average()` takes an array as an argument. 

```js
function age (person) {
  return person.died - person.born;
}
```
##### male( )
`male()` will be passed into `filter()` as a criteria. 

```js
function male (person) {
  return person.sex === "m";
}
```

##### female( )
`female()` will be passed into `filter()` as a criteria. 

```js
function female (person) {
  return person.sex === "f";
}
```

### Average( )
The `plus()` function above is passed into `reduce()` as a callback to add up all items in an array. The sum is divided by the length of the array to return the average of all numbers in an array. 

```js
function average (array) {
  return array.reduce(plus) / array.length;
}
```

#### Find Average Age of Men and Women
Now I have a function that takes an array, and returns the average of all numbers in that array. Now I need an array of the ages of men, and the ages of women to use it on. For narrowing our data down and focusing a specific property like sex, I'll use `filter()` along with projection function `map()` to project our custom `age()` function onto each object and push the result into a new array that can be passed into `average()`. This is all about to go down on one line with 41 characters. 

```js
average(ancestry.filter(male).map(age));
```
> 61.666666666666664  


```js
average(ancestry.filter(female).map(age));
```
> 54.55555555555556  


1. filter `ancestry` by sex, passing a filtering callback into `filter()` 
  * `male()` 
  * or `female()`
1. call `map()` passing `age()` callback 
  * `map()` performs `age()` on each object, subtracting birth year from death year, projecting the result into a new array
  * Now we have what we need, an array with the ages of all men (or of all women)
1. pass all this into our `average()` function
1. `average()` takes the array returned by `map()` and 
  * uses `reduce()` to find sum
  * and divides by `array.length` to get the average 


#### roundAverage( )
The function above works great, but I might not need accuracy to 15 decimal points, and would rather have a round number to work with. Here, I modified the `average()` function with `Math.round` to produce a cleaner answer. 

```js
function roundAverage(array) {
    function plus(a, b){ return a +b;}
    return Math.round(array.reduce(plus) / array.length);
}
```
What is the average age of all men in this data?

```js
roundAverage(ancestry.filter(male).map(age));
```
> 62  

What is the average age of all women in this?

```js
roundAverage(ancestry.filter(female).map(age));
```
> 55  

